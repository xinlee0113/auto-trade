@startuml REQ-EXEC-002 高频执行要求流程时序图
!theme plain

title REQ-EXEC-002: 高频执行要求 - 跨类流程时序图

participant "DataAccessLayer" as DAL
participant "ExternalAPIAdapter" as EAA
participant "OptionTradingService" as OTS
participant "ValidationUtility" as VU
participant "CacheRepository" as CR
participant "ParallelAPIManager" as PAM
participant "RiskManagementService" as RMS

note over DAL, RMS
  **需求**: REQ-EXEC-002 高频执行要求
  **性能指标**: 数据延迟<500ms、下单延迟<2秒、可用性99.5%+、执行成功率>95%
  **执行优化**: 智能路由、滑点控制、部分成交处理、执行质量监控
  **目标**: 满足高频交易性能要求
end note

== 1. 高频执行系统初始化 ==

OTS -> PAM: initialize_hft_execution_system()
activate PAM

PAM -> PAM: setup_parallel_execution_pools()
note right PAM
  并行执行池初始化:
  - market_data_pool: 8个线程
  - order_execution_pool: 4个线程
  - risk_calculation_pool: 4个线程
  - latency_monitoring_pool: 2个线程
end note

PAM -> EAA: establish_low_latency_connections()
activate EAA

EAA -> EAA: setup_primary_connections()
EAA -> EAA: setup_backup_connections()
EAA -> EAA: configure_connection_pooling()

note right EAA
  低延迟连接配置:
  - 主连接: 专用高速线路
  - 备用连接: 备份线路
  - 连接池: 预建立连接复用
  - 心跳监控: 每1秒检测
end note

EAA --> PAM: connections_established(primary, backup)
deactivate EAA

PAM --> OTS: hft_system_ready(performance_baseline)
deactivate PAM

== 2. 数据延迟优化 (<500ms) ==

DAL -> CR: setup_high_performance_cache()
activate CR

CR -> CR: configure_memory_cache()
note right CR
  高性能缓存配置:
  - L1缓存: 最新价格数据(TTL=1秒)
  - L2缓存: 期权链数据(TTL=10秒)
  - L3缓存: 历史数据(TTL=60秒)
  - 缓存预热: 系统启动时预加载
end note

CR --> DAL: high_performance_cache_ready
deactivate CR

loop 实时数据流处理
    DAL -> EAA: subscribe_real_time_feeds()
    activate EAA
    
    EAA -> EAA: receive_market_data_stream()
    note right EAA
      数据接收优化:
      - 二进制协议: 减少解析开销
      - 批量接收: 减少系统调用
      - 零拷贝: 直接内存映射
    end note
    
    EAA -> DAL: deliver_market_data(timestamp_received)
    deactivate EAA
    
    DAL -> DAL: measure_data_latency()
    note right DAL
      延迟测量:
      processing_latency = current_time - timestamp_received
      target_latency = 500ms
      latency_violation = processing_latency > target_latency
    end note
    
    alt 延迟 < 500ms
        DAL -> CR: cache_latest_data(data, timestamp)
        activate CR
        CR --> DAL: data_cached
        deactivate CR
        
        DAL -> OTS: notify_data_ready(data, latency_metrics)
        
    else 延迟 ≥ 500ms
        DAL -> DAL: trigger_latency_optimization()
        note right DAL
          延迟优化措施:
          - 切换到备用数据源
          - 增加缓存命中率
          - 减少数据处理步骤
          - 优化网络配置
        end note
        
        DAL -> EAA: switch_to_backup_feed()
        activate EAA
        EAA --> DAL: backup_feed_active
        deactivate EAA
    end
end

== 3. 下单延迟优化 (<2秒) ==

OTS -> PAM: execute_high_frequency_order(order_request)
activate PAM

PAM -> PAM: start_execution_timer()
note right PAM
  执行计时开始:
  execution_start_time = current_timestamp_microseconds()
  target_execution_time = 2000ms
end note

== 3.1 智能订单路由 ==

PAM -> VU: select_optimal_execution_venue(order)
activate VU

VU -> VU: analyze_venue_performance()
note right VU
  执行场所分析:
  venues_analysis = {
      'venue_A': {latency: 150ms, fill_rate: 0.98, cost: low},
      'venue_B': {latency: 200ms, fill_rate: 0.96, cost: medium},
      'venue_C': {latency: 100ms, fill_rate: 0.99, cost: high}
  }
  
  optimal_venue = select_by_weighted_score(venues_analysis)
end note

VU --> PAM: optimal_venue(venue_id, expected_latency)
deactivate VU

== 3.2 预执行风险检查 ==

PAM -> RMS: fast_risk_check(order, venue)
activate RMS

RMS -> RMS: execute_critical_checks_only()
note right RMS
  快速风险检查:
  - 资金充足性: O(1)查询
  - 仓位限制: 缓存查询
  - 市场状态: 内存检查
  - 跳过非关键检查以节省时间
end note

RMS --> PAM: risk_approved(check_duration=50ms)
deactivate RMS

== 3.3 并行订单处理 ==

par 主订单执行
    PAM -> EAA: execute_primary_order(order, optimal_venue)
    activate EAA
    
    EAA -> EAA: prepare_order_message()
    EAA -> EAA: send_order_via_fast_connection()
    
    alt 订单立即确认
        EAA --> PAM: order_confirmed(execution_report, latency)
    else 订单待确认
        EAA --> PAM: order_pending(order_id)
        
        EAA -> EAA: monitor_order_status()
        EAA --> PAM: order_status_update(fill_status)
    end
    deactivate EAA

else 备用执行路径
    PAM -> EAA: prepare_backup_execution(order)
    activate EAA
    
    EAA -> EAA: pre_validate_backup_venue()
    EAA -> EAA: pre_calculate_execution_params()
    
    note right EAA
      备用路径准备:
      - 预验证备用场所可用性
      - 预计算执行参数
      - 保持连接热备状态
    end note
    
    EAA --> PAM: backup_ready(standby_time=100ms)
    deactivate EAA
end

== 3.4 执行监控和fallback ==

PAM -> PAM: monitor_execution_progress()

alt 主路径成功 AND 延迟 < 2秒
    PAM -> PAM: record_successful_execution()
    note right PAM
      成功执行记录:
      total_latency = end_time - start_time
      venue_performance = update_venue_stats()
      execution_quality = calculate_quality_metrics()
    end note
    
else 主路径失败 OR 延迟 ≥ 2秒
    PAM -> EAA: activate_backup_execution()
    activate EAA
    
    EAA -> EAA: cancel_primary_order_if_needed()
    EAA -> EAA: execute_via_backup_venue()
    
    EAA --> PAM: backup_execution_result(latency)
    deactivate EAA
    
    alt 备用执行成功
        PAM -> PAM: record_fallback_execution()
    else 备用执行也失败
        PAM -> PAM: escalate_execution_failure()
        note right PAM: 上报执行失败，触发人工干预
    end
end

PAM --> OTS: execution_completed(result, total_latency, quality_metrics)
deactivate PAM

== 4. 系统可用性监控 (99.5%+) ==

par 连接健康监控
    EAA -> EAA: monitor_connection_health()
    activate EAA
    
    loop 连续监控
        EAA -> EAA: send_heartbeat_ping()
        
        alt 心跳正常
            EAA -> EAA: update_connection_status(healthy)
        else 心跳超时
            EAA -> EAA: detect_connection_failure()
            EAA -> EAA: initiate_connection_recovery()
            
            alt 恢复成功
                EAA -> EAA: log_brief_outage(duration)
            else 恢复失败
                EAA -> EAA: escalate_connectivity_issue()
            end
        end
    end
    deactivate EAA

else 系统性能监控
    PAM -> PAM: monitor_system_performance()
    activate PAM
    
    loop 性能监控
        PAM -> PAM: collect_performance_metrics()
        note right PAM
          性能指标收集:
          - CPU使用率
          - 内存使用率
          - 网络延迟
          - 磁盘I/O
          - 线程池状态
        end note
        
        alt 性能正常
            PAM -> PAM: update_availability_stats()
        else 性能异常
            PAM -> PAM: trigger_performance_optimization()
            
            PAM -> CR: optimize_cache_performance()
            activate CR
            CR --> PAM: cache_optimized
            deactivate CR
            
            PAM -> EAA: optimize_connection_settings()
            activate EAA
            EAA --> PAM: connections_optimized
            deactivate EAA
        end
    end
    deactivate PAM
end

== 5. 执行质量监控和优化 ==

OTS -> OTS: analyze_execution_quality()
note right OTS
  执行质量分析:
  metrics = {
      'fill_rate': successful_orders / total_orders,
      'average_latency': sum(latencies) / count,
      'slippage': actual_price - expected_price,
      'market_impact': measure_price_impact(),
      'venue_performance': analyze_venue_effectiveness()
  }
end note

alt 执行质量达标
    OTS -> OTS: update_execution_strategy(metrics)
    note right OTS
      策略优化:
      - 调整venue权重
      - 优化订单大小
      - 改进时机选择
    end note
    
else 执行质量不达标
    OTS -> PAM: request_execution_optimization()
    activate PAM
    
    PAM -> PAM: analyze_performance_bottlenecks()
    PAM -> PAM: implement_optimization_measures()
    
    PAM --> OTS: optimization_completed(improvement_metrics)
    deactivate PAM
end

note over DAL, RMS
  **验收标准**:
  ✓ 数据延迟<500ms
  ✓ 下单延迟<2秒
  ✓ 系统可用性>99.5%
  ✓ 执行成功率>95%
end note

@enduml
